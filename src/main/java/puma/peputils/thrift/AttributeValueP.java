/*******************************************************************************
 * Copyright 2014 KU Leuven Research and Developement - iMinds - Distrinet 
 * 
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *    
 *    Administrative Contact: dnet-project-office@cs.kuleuven.be
 *    Technical Contact: maarten.decat@cs.kuleuven.be
 *    Author: maarten.decat@cs.kuleuven.be
 ******************************************************************************/
/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package puma.peputils.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-1-21")
public class AttributeValueP implements org.apache.thrift.TBase<AttributeValueP, AttributeValueP._Fields>, java.io.Serializable, Cloneable, Comparable<AttributeValueP> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AttributeValueP");

  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STRING_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValues", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField INT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("intValues", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DATETIME_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("datetimeValues", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField BOOLEAN_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanValues", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AttributeValuePStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AttributeValuePTupleSchemeFactory());
  }

  /**
   * 
   * @see DataTypeP
   */
  public DataTypeP dataType; // required
  public String id; // required
  public List<String> stringValues; // optional
  public List<Integer> intValues; // optional
  public List<Long> datetimeValues; // optional
  public List<Boolean> booleanValues; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see DataTypeP
     */
    DATA_TYPE((short)1, "dataType"),
    ID((short)2, "id"),
    STRING_VALUES((short)3, "stringValues"),
    INT_VALUES((short)4, "intValues"),
    DATETIME_VALUES((short)5, "datetimeValues"),
    BOOLEAN_VALUES((short)6, "booleanValues");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_TYPE
          return DATA_TYPE;
        case 2: // ID
          return ID;
        case 3: // STRING_VALUES
          return STRING_VALUES;
        case 4: // INT_VALUES
          return INT_VALUES;
        case 5: // DATETIME_VALUES
          return DATETIME_VALUES;
        case 6: // BOOLEAN_VALUES
          return BOOLEAN_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STRING_VALUES,_Fields.INT_VALUES,_Fields.DATETIME_VALUES,_Fields.BOOLEAN_VALUES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataTypeP.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING_VALUES, new org.apache.thrift.meta_data.FieldMetaData("stringValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("intValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DATETIME_VALUES, new org.apache.thrift.meta_data.FieldMetaData("datetimeValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.BOOLEAN_VALUES, new org.apache.thrift.meta_data.FieldMetaData("booleanValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AttributeValueP.class, metaDataMap);
  }

  public AttributeValueP() {
  }

  public AttributeValueP(
    DataTypeP dataType,
    String id)
  {
    this();
    this.dataType = dataType;
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AttributeValueP(AttributeValueP other) {
    if (other.isSetDataType()) {
      this.dataType = other.dataType;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetStringValues()) {
      List<String> __this__stringValues = new ArrayList<String>(other.stringValues);
      this.stringValues = __this__stringValues;
    }
    if (other.isSetIntValues()) {
      List<Integer> __this__intValues = new ArrayList<Integer>(other.intValues);
      this.intValues = __this__intValues;
    }
    if (other.isSetDatetimeValues()) {
      List<Long> __this__datetimeValues = new ArrayList<Long>(other.datetimeValues);
      this.datetimeValues = __this__datetimeValues;
    }
    if (other.isSetBooleanValues()) {
      List<Boolean> __this__booleanValues = new ArrayList<Boolean>(other.booleanValues);
      this.booleanValues = __this__booleanValues;
    }
  }

  public AttributeValueP deepCopy() {
    return new AttributeValueP(this);
  }

  @Override
  public void clear() {
    this.dataType = null;
    this.id = null;
    this.stringValues = null;
    this.intValues = null;
    this.datetimeValues = null;
    this.booleanValues = null;
  }

  /**
   * 
   * @see DataTypeP
   */
  public DataTypeP getDataType() {
    return this.dataType;
  }

  /**
   * 
   * @see DataTypeP
   */
  public AttributeValueP setDataType(DataTypeP dataType) {
    this.dataType = dataType;
    return this;
  }

  public void unsetDataType() {
    this.dataType = null;
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return this.dataType != null;
  }

  public void setDataTypeIsSet(boolean value) {
    if (!value) {
      this.dataType = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public AttributeValueP setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getStringValuesSize() {
    return (this.stringValues == null) ? 0 : this.stringValues.size();
  }

  public java.util.Iterator<String> getStringValuesIterator() {
    return (this.stringValues == null) ? null : this.stringValues.iterator();
  }

  public void addToStringValues(String elem) {
    if (this.stringValues == null) {
      this.stringValues = new ArrayList<String>();
    }
    this.stringValues.add(elem);
  }

  public List<String> getStringValues() {
    return this.stringValues;
  }

  public AttributeValueP setStringValues(List<String> stringValues) {
    this.stringValues = stringValues;
    return this;
  }

  public void unsetStringValues() {
    this.stringValues = null;
  }

  /** Returns true if field stringValues is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValues() {
    return this.stringValues != null;
  }

  public void setStringValuesIsSet(boolean value) {
    if (!value) {
      this.stringValues = null;
    }
  }

  public int getIntValuesSize() {
    return (this.intValues == null) ? 0 : this.intValues.size();
  }

  public java.util.Iterator<Integer> getIntValuesIterator() {
    return (this.intValues == null) ? null : this.intValues.iterator();
  }

  public void addToIntValues(int elem) {
    if (this.intValues == null) {
      this.intValues = new ArrayList<Integer>();
    }
    this.intValues.add(elem);
  }

  public List<Integer> getIntValues() {
    return this.intValues;
  }

  public AttributeValueP setIntValues(List<Integer> intValues) {
    this.intValues = intValues;
    return this;
  }

  public void unsetIntValues() {
    this.intValues = null;
  }

  /** Returns true if field intValues is set (has been assigned a value) and false otherwise */
  public boolean isSetIntValues() {
    return this.intValues != null;
  }

  public void setIntValuesIsSet(boolean value) {
    if (!value) {
      this.intValues = null;
    }
  }

  public int getDatetimeValuesSize() {
    return (this.datetimeValues == null) ? 0 : this.datetimeValues.size();
  }

  public java.util.Iterator<Long> getDatetimeValuesIterator() {
    return (this.datetimeValues == null) ? null : this.datetimeValues.iterator();
  }

  public void addToDatetimeValues(long elem) {
    if (this.datetimeValues == null) {
      this.datetimeValues = new ArrayList<Long>();
    }
    this.datetimeValues.add(elem);
  }

  public List<Long> getDatetimeValues() {
    return this.datetimeValues;
  }

  public AttributeValueP setDatetimeValues(List<Long> datetimeValues) {
    this.datetimeValues = datetimeValues;
    return this;
  }

  public void unsetDatetimeValues() {
    this.datetimeValues = null;
  }

  /** Returns true if field datetimeValues is set (has been assigned a value) and false otherwise */
  public boolean isSetDatetimeValues() {
    return this.datetimeValues != null;
  }

  public void setDatetimeValuesIsSet(boolean value) {
    if (!value) {
      this.datetimeValues = null;
    }
  }

  public int getBooleanValuesSize() {
    return (this.booleanValues == null) ? 0 : this.booleanValues.size();
  }

  public java.util.Iterator<Boolean> getBooleanValuesIterator() {
    return (this.booleanValues == null) ? null : this.booleanValues.iterator();
  }

  public void addToBooleanValues(boolean elem) {
    if (this.booleanValues == null) {
      this.booleanValues = new ArrayList<Boolean>();
    }
    this.booleanValues.add(elem);
  }

  public List<Boolean> getBooleanValues() {
    return this.booleanValues;
  }

  public AttributeValueP setBooleanValues(List<Boolean> booleanValues) {
    this.booleanValues = booleanValues;
    return this;
  }

  public void unsetBooleanValues() {
    this.booleanValues = null;
  }

  /** Returns true if field booleanValues is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanValues() {
    return this.booleanValues != null;
  }

  public void setBooleanValuesIsSet(boolean value) {
    if (!value) {
      this.booleanValues = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((DataTypeP)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case STRING_VALUES:
      if (value == null) {
        unsetStringValues();
      } else {
        setStringValues((List<String>)value);
      }
      break;

    case INT_VALUES:
      if (value == null) {
        unsetIntValues();
      } else {
        setIntValues((List<Integer>)value);
      }
      break;

    case DATETIME_VALUES:
      if (value == null) {
        unsetDatetimeValues();
      } else {
        setDatetimeValues((List<Long>)value);
      }
      break;

    case BOOLEAN_VALUES:
      if (value == null) {
        unsetBooleanValues();
      } else {
        setBooleanValues((List<Boolean>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_TYPE:
      return getDataType();

    case ID:
      return getId();

    case STRING_VALUES:
      return getStringValues();

    case INT_VALUES:
      return getIntValues();

    case DATETIME_VALUES:
      return getDatetimeValues();

    case BOOLEAN_VALUES:
      return getBooleanValues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA_TYPE:
      return isSetDataType();
    case ID:
      return isSetId();
    case STRING_VALUES:
      return isSetStringValues();
    case INT_VALUES:
      return isSetIntValues();
    case DATETIME_VALUES:
      return isSetDatetimeValues();
    case BOOLEAN_VALUES:
      return isSetBooleanValues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AttributeValueP)
      return this.equals((AttributeValueP)that);
    return false;
  }

  public boolean equals(AttributeValueP that) {
    if (that == null)
      return false;

    boolean this_present_dataType = true && this.isSetDataType();
    boolean that_present_dataType = true && that.isSetDataType();
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (!this.dataType.equals(that.dataType))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_stringValues = true && this.isSetStringValues();
    boolean that_present_stringValues = true && that.isSetStringValues();
    if (this_present_stringValues || that_present_stringValues) {
      if (!(this_present_stringValues && that_present_stringValues))
        return false;
      if (!this.stringValues.equals(that.stringValues))
        return false;
    }

    boolean this_present_intValues = true && this.isSetIntValues();
    boolean that_present_intValues = true && that.isSetIntValues();
    if (this_present_intValues || that_present_intValues) {
      if (!(this_present_intValues && that_present_intValues))
        return false;
      if (!this.intValues.equals(that.intValues))
        return false;
    }

    boolean this_present_datetimeValues = true && this.isSetDatetimeValues();
    boolean that_present_datetimeValues = true && that.isSetDatetimeValues();
    if (this_present_datetimeValues || that_present_datetimeValues) {
      if (!(this_present_datetimeValues && that_present_datetimeValues))
        return false;
      if (!this.datetimeValues.equals(that.datetimeValues))
        return false;
    }

    boolean this_present_booleanValues = true && this.isSetBooleanValues();
    boolean that_present_booleanValues = true && that.isSetBooleanValues();
    if (this_present_booleanValues || that_present_booleanValues) {
      if (!(this_present_booleanValues && that_present_booleanValues))
        return false;
      if (!this.booleanValues.equals(that.booleanValues))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dataType = true && (isSetDataType());
    list.add(present_dataType);
    if (present_dataType)
      list.add(dataType.getValue());

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_stringValues = true && (isSetStringValues());
    list.add(present_stringValues);
    if (present_stringValues)
      list.add(stringValues);

    boolean present_intValues = true && (isSetIntValues());
    list.add(present_intValues);
    if (present_intValues)
      list.add(intValues);

    boolean present_datetimeValues = true && (isSetDatetimeValues());
    list.add(present_datetimeValues);
    if (present_datetimeValues)
      list.add(datetimeValues);

    boolean present_booleanValues = true && (isSetBooleanValues());
    list.add(present_booleanValues);
    if (present_booleanValues)
      list.add(booleanValues);

    return list.hashCode();
  }

  @Override
  public int compareTo(AttributeValueP other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringValues()).compareTo(other.isSetStringValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValues, other.stringValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntValues()).compareTo(other.isSetIntValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intValues, other.intValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatetimeValues()).compareTo(other.isSetDatetimeValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatetimeValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datetimeValues, other.datetimeValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBooleanValues()).compareTo(other.isSetBooleanValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanValues, other.booleanValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AttributeValueP(");
    boolean first = true;

    sb.append("dataType:");
    if (this.dataType == null) {
      sb.append("null");
    } else {
      sb.append(this.dataType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetStringValues()) {
      if (!first) sb.append(", ");
      sb.append("stringValues:");
      if (this.stringValues == null) {
        sb.append("null");
      } else {
        sb.append(this.stringValues);
      }
      first = false;
    }
    if (isSetIntValues()) {
      if (!first) sb.append(", ");
      sb.append("intValues:");
      if (this.intValues == null) {
        sb.append("null");
      } else {
        sb.append(this.intValues);
      }
      first = false;
    }
    if (isSetDatetimeValues()) {
      if (!first) sb.append(", ");
      sb.append("datetimeValues:");
      if (this.datetimeValues == null) {
        sb.append("null");
      } else {
        sb.append(this.datetimeValues);
      }
      first = false;
    }
    if (isSetBooleanValues()) {
      if (!first) sb.append(", ");
      sb.append("booleanValues:");
      if (this.booleanValues == null) {
        sb.append("null");
      } else {
        sb.append(this.booleanValues);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AttributeValuePStandardSchemeFactory implements SchemeFactory {
    public AttributeValuePStandardScheme getScheme() {
      return new AttributeValuePStandardScheme();
    }
  }

  private static class AttributeValuePStandardScheme extends StandardScheme<AttributeValueP> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AttributeValueP struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataType = DataTypeP.findByValue(iprot.readI32());
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.stringValues = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.stringValues.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setStringValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INT_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.intValues = new ArrayList<Integer>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  int _elem5;
                  _elem5 = iprot.readI32();
                  struct.intValues.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setIntValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATETIME_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.datetimeValues = new ArrayList<Long>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  long _elem8;
                  _elem8 = iprot.readI64();
                  struct.datetimeValues.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setDatetimeValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BOOLEAN_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.booleanValues = new ArrayList<Boolean>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  boolean _elem11;
                  _elem11 = iprot.readBool();
                  struct.booleanValues.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setBooleanValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AttributeValueP struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dataType != null) {
        oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
        oprot.writeI32(struct.dataType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.stringValues != null) {
        if (struct.isSetStringValues()) {
          oprot.writeFieldBegin(STRING_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stringValues.size()));
            for (String _iter12 : struct.stringValues)
            {
              oprot.writeString(_iter12);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.intValues != null) {
        if (struct.isSetIntValues()) {
          oprot.writeFieldBegin(INT_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intValues.size()));
            for (int _iter13 : struct.intValues)
            {
              oprot.writeI32(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.datetimeValues != null) {
        if (struct.isSetDatetimeValues()) {
          oprot.writeFieldBegin(DATETIME_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.datetimeValues.size()));
            for (long _iter14 : struct.datetimeValues)
            {
              oprot.writeI64(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.booleanValues != null) {
        if (struct.isSetBooleanValues()) {
          oprot.writeFieldBegin(BOOLEAN_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.booleanValues.size()));
            for (boolean _iter15 : struct.booleanValues)
            {
              oprot.writeBool(_iter15);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AttributeValuePTupleSchemeFactory implements SchemeFactory {
    public AttributeValuePTupleScheme getScheme() {
      return new AttributeValuePTupleScheme();
    }
  }

  private static class AttributeValuePTupleScheme extends TupleScheme<AttributeValueP> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AttributeValueP struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDataType()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetStringValues()) {
        optionals.set(2);
      }
      if (struct.isSetIntValues()) {
        optionals.set(3);
      }
      if (struct.isSetDatetimeValues()) {
        optionals.set(4);
      }
      if (struct.isSetBooleanValues()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDataType()) {
        oprot.writeI32(struct.dataType.getValue());
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetStringValues()) {
        {
          oprot.writeI32(struct.stringValues.size());
          for (String _iter16 : struct.stringValues)
          {
            oprot.writeString(_iter16);
          }
        }
      }
      if (struct.isSetIntValues()) {
        {
          oprot.writeI32(struct.intValues.size());
          for (int _iter17 : struct.intValues)
          {
            oprot.writeI32(_iter17);
          }
        }
      }
      if (struct.isSetDatetimeValues()) {
        {
          oprot.writeI32(struct.datetimeValues.size());
          for (long _iter18 : struct.datetimeValues)
          {
            oprot.writeI64(_iter18);
          }
        }
      }
      if (struct.isSetBooleanValues()) {
        {
          oprot.writeI32(struct.booleanValues.size());
          for (boolean _iter19 : struct.booleanValues)
          {
            oprot.writeBool(_iter19);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AttributeValueP struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.dataType = DataTypeP.findByValue(iprot.readI32());
        struct.setDataTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stringValues = new ArrayList<String>(_list20.size);
          for (int _i21 = 0; _i21 < _list20.size; ++_i21)
          {
            String _elem22;
            _elem22 = iprot.readString();
            struct.stringValues.add(_elem22);
          }
        }
        struct.setStringValuesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intValues = new ArrayList<Integer>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            int _elem25;
            _elem25 = iprot.readI32();
            struct.intValues.add(_elem25);
          }
        }
        struct.setIntValuesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.datetimeValues = new ArrayList<Long>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            long _elem28;
            _elem28 = iprot.readI64();
            struct.datetimeValues.add(_elem28);
          }
        }
        struct.setDatetimeValuesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.booleanValues = new ArrayList<Boolean>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            boolean _elem31;
            _elem31 = iprot.readBool();
            struct.booleanValues.add(_elem31);
          }
        }
        struct.setBooleanValuesIsSet(true);
      }
    }
  }

}

