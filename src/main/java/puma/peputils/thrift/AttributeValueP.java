/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package puma.peputils.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-1-21")
public class AttributeValueP implements org.apache.thrift.TBase<AttributeValueP, AttributeValueP._Fields>, java.io.Serializable, Cloneable, Comparable<AttributeValueP> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AttributeValueP");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("string_value", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("int_value", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DATETIME_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("datetime_value", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BOOLEAN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("boolean_value", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AttributeValuePStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AttributeValuePTupleSchemeFactory());
  }

  /**
   * 
   * @see DataTypeP
   */
  public DataTypeP type; // required
  public String id; // required
  public String string_value; // optional
  public int int_value; // optional
  public long datetime_value; // optional
  public boolean boolean_value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see DataTypeP
     */
    TYPE((short)1, "type"),
    ID((short)2, "id"),
    STRING_VALUE((short)3, "string_value"),
    INT_VALUE((short)4, "int_value"),
    DATETIME_VALUE((short)5, "datetime_value"),
    BOOLEAN_VALUE((short)6, "boolean_value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // ID
          return ID;
        case 3: // STRING_VALUE
          return STRING_VALUE;
        case 4: // INT_VALUE
          return INT_VALUE;
        case 5: // DATETIME_VALUE
          return DATETIME_VALUE;
        case 6: // BOOLEAN_VALUE
          return BOOLEAN_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INT_VALUE_ISSET_ID = 0;
  private static final int __DATETIME_VALUE_ISSET_ID = 1;
  private static final int __BOOLEAN_VALUE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STRING_VALUE,_Fields.INT_VALUE,_Fields.DATETIME_VALUE,_Fields.BOOLEAN_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataTypeP.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("string_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("int_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATETIME_VALUE, new org.apache.thrift.meta_data.FieldMetaData("datetime_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BOOLEAN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("boolean_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AttributeValueP.class, metaDataMap);
  }

  public AttributeValueP() {
  }

  public AttributeValueP(
    DataTypeP type,
    String id)
  {
    this();
    this.type = type;
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AttributeValueP(AttributeValueP other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetString_value()) {
      this.string_value = other.string_value;
    }
    this.int_value = other.int_value;
    this.datetime_value = other.datetime_value;
    this.boolean_value = other.boolean_value;
  }

  public AttributeValueP deepCopy() {
    return new AttributeValueP(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.id = null;
    this.string_value = null;
    setInt_valueIsSet(false);
    this.int_value = 0;
    setDatetime_valueIsSet(false);
    this.datetime_value = 0;
    setBoolean_valueIsSet(false);
    this.boolean_value = false;
  }

  /**
   * 
   * @see DataTypeP
   */
  public DataTypeP getType() {
    return this.type;
  }

  /**
   * 
   * @see DataTypeP
   */
  public AttributeValueP setType(DataTypeP type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public AttributeValueP setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getString_value() {
    return this.string_value;
  }

  public AttributeValueP setString_value(String string_value) {
    this.string_value = string_value;
    return this;
  }

  public void unsetString_value() {
    this.string_value = null;
  }

  /** Returns true if field string_value is set (has been assigned a value) and false otherwise */
  public boolean isSetString_value() {
    return this.string_value != null;
  }

  public void setString_valueIsSet(boolean value) {
    if (!value) {
      this.string_value = null;
    }
  }

  public int getInt_value() {
    return this.int_value;
  }

  public AttributeValueP setInt_value(int int_value) {
    this.int_value = int_value;
    setInt_valueIsSet(true);
    return this;
  }

  public void unsetInt_value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT_VALUE_ISSET_ID);
  }

  /** Returns true if field int_value is set (has been assigned a value) and false otherwise */
  public boolean isSetInt_value() {
    return EncodingUtils.testBit(__isset_bitfield, __INT_VALUE_ISSET_ID);
  }

  public void setInt_valueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT_VALUE_ISSET_ID, value);
  }

  public long getDatetime_value() {
    return this.datetime_value;
  }

  public AttributeValueP setDatetime_value(long datetime_value) {
    this.datetime_value = datetime_value;
    setDatetime_valueIsSet(true);
    return this;
  }

  public void unsetDatetime_value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATETIME_VALUE_ISSET_ID);
  }

  /** Returns true if field datetime_value is set (has been assigned a value) and false otherwise */
  public boolean isSetDatetime_value() {
    return EncodingUtils.testBit(__isset_bitfield, __DATETIME_VALUE_ISSET_ID);
  }

  public void setDatetime_valueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATETIME_VALUE_ISSET_ID, value);
  }

  public boolean isBoolean_value() {
    return this.boolean_value;
  }

  public AttributeValueP setBoolean_value(boolean boolean_value) {
    this.boolean_value = boolean_value;
    setBoolean_valueIsSet(true);
    return this;
  }

  public void unsetBoolean_value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLEAN_VALUE_ISSET_ID);
  }

  /** Returns true if field boolean_value is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolean_value() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLEAN_VALUE_ISSET_ID);
  }

  public void setBoolean_valueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLEAN_VALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((DataTypeP)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case STRING_VALUE:
      if (value == null) {
        unsetString_value();
      } else {
        setString_value((String)value);
      }
      break;

    case INT_VALUE:
      if (value == null) {
        unsetInt_value();
      } else {
        setInt_value((Integer)value);
      }
      break;

    case DATETIME_VALUE:
      if (value == null) {
        unsetDatetime_value();
      } else {
        setDatetime_value((Long)value);
      }
      break;

    case BOOLEAN_VALUE:
      if (value == null) {
        unsetBoolean_value();
      } else {
        setBoolean_value((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case ID:
      return getId();

    case STRING_VALUE:
      return getString_value();

    case INT_VALUE:
      return Integer.valueOf(getInt_value());

    case DATETIME_VALUE:
      return Long.valueOf(getDatetime_value());

    case BOOLEAN_VALUE:
      return Boolean.valueOf(isBoolean_value());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case ID:
      return isSetId();
    case STRING_VALUE:
      return isSetString_value();
    case INT_VALUE:
      return isSetInt_value();
    case DATETIME_VALUE:
      return isSetDatetime_value();
    case BOOLEAN_VALUE:
      return isSetBoolean_value();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AttributeValueP)
      return this.equals((AttributeValueP)that);
    return false;
  }

  public boolean equals(AttributeValueP that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_string_value = true && this.isSetString_value();
    boolean that_present_string_value = true && that.isSetString_value();
    if (this_present_string_value || that_present_string_value) {
      if (!(this_present_string_value && that_present_string_value))
        return false;
      if (!this.string_value.equals(that.string_value))
        return false;
    }

    boolean this_present_int_value = true && this.isSetInt_value();
    boolean that_present_int_value = true && that.isSetInt_value();
    if (this_present_int_value || that_present_int_value) {
      if (!(this_present_int_value && that_present_int_value))
        return false;
      if (this.int_value != that.int_value)
        return false;
    }

    boolean this_present_datetime_value = true && this.isSetDatetime_value();
    boolean that_present_datetime_value = true && that.isSetDatetime_value();
    if (this_present_datetime_value || that_present_datetime_value) {
      if (!(this_present_datetime_value && that_present_datetime_value))
        return false;
      if (this.datetime_value != that.datetime_value)
        return false;
    }

    boolean this_present_boolean_value = true && this.isSetBoolean_value();
    boolean that_present_boolean_value = true && that.isSetBoolean_value();
    if (this_present_boolean_value || that_present_boolean_value) {
      if (!(this_present_boolean_value && that_present_boolean_value))
        return false;
      if (this.boolean_value != that.boolean_value)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_string_value = true && (isSetString_value());
    list.add(present_string_value);
    if (present_string_value)
      list.add(string_value);

    boolean present_int_value = true && (isSetInt_value());
    list.add(present_int_value);
    if (present_int_value)
      list.add(int_value);

    boolean present_datetime_value = true && (isSetDatetime_value());
    list.add(present_datetime_value);
    if (present_datetime_value)
      list.add(datetime_value);

    boolean present_boolean_value = true && (isSetBoolean_value());
    list.add(present_boolean_value);
    if (present_boolean_value)
      list.add(boolean_value);

    return list.hashCode();
  }

  @Override
  public int compareTo(AttributeValueP other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_value()).compareTo(other.isSetString_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_value, other.string_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt_value()).compareTo(other.isSetInt_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_value, other.int_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatetime_value()).compareTo(other.isSetDatetime_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatetime_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datetime_value, other.datetime_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolean_value()).compareTo(other.isSetBoolean_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolean_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolean_value, other.boolean_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AttributeValueP(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetString_value()) {
      if (!first) sb.append(", ");
      sb.append("string_value:");
      if (this.string_value == null) {
        sb.append("null");
      } else {
        sb.append(this.string_value);
      }
      first = false;
    }
    if (isSetInt_value()) {
      if (!first) sb.append(", ");
      sb.append("int_value:");
      sb.append(this.int_value);
      first = false;
    }
    if (isSetDatetime_value()) {
      if (!first) sb.append(", ");
      sb.append("datetime_value:");
      sb.append(this.datetime_value);
      first = false;
    }
    if (isSetBoolean_value()) {
      if (!first) sb.append(", ");
      sb.append("boolean_value:");
      sb.append(this.boolean_value);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AttributeValuePStandardSchemeFactory implements SchemeFactory {
    public AttributeValuePStandardScheme getScheme() {
      return new AttributeValuePStandardScheme();
    }
  }

  private static class AttributeValuePStandardScheme extends StandardScheme<AttributeValueP> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AttributeValueP struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = DataTypeP.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string_value = iprot.readString();
              struct.setString_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.int_value = iprot.readI32();
              struct.setInt_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATETIME_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datetime_value = iprot.readI64();
              struct.setDatetime_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BOOLEAN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolean_value = iprot.readBool();
              struct.setBoolean_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AttributeValueP struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.string_value != null) {
        if (struct.isSetString_value()) {
          oprot.writeFieldBegin(STRING_VALUE_FIELD_DESC);
          oprot.writeString(struct.string_value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInt_value()) {
        oprot.writeFieldBegin(INT_VALUE_FIELD_DESC);
        oprot.writeI32(struct.int_value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDatetime_value()) {
        oprot.writeFieldBegin(DATETIME_VALUE_FIELD_DESC);
        oprot.writeI64(struct.datetime_value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoolean_value()) {
        oprot.writeFieldBegin(BOOLEAN_VALUE_FIELD_DESC);
        oprot.writeBool(struct.boolean_value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AttributeValuePTupleSchemeFactory implements SchemeFactory {
    public AttributeValuePTupleScheme getScheme() {
      return new AttributeValuePTupleScheme();
    }
  }

  private static class AttributeValuePTupleScheme extends TupleScheme<AttributeValueP> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AttributeValueP struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetString_value()) {
        optionals.set(2);
      }
      if (struct.isSetInt_value()) {
        optionals.set(3);
      }
      if (struct.isSetDatetime_value()) {
        optionals.set(4);
      }
      if (struct.isSetBoolean_value()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetString_value()) {
        oprot.writeString(struct.string_value);
      }
      if (struct.isSetInt_value()) {
        oprot.writeI32(struct.int_value);
      }
      if (struct.isSetDatetime_value()) {
        oprot.writeI64(struct.datetime_value);
      }
      if (struct.isSetBoolean_value()) {
        oprot.writeBool(struct.boolean_value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AttributeValueP struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.type = DataTypeP.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.string_value = iprot.readString();
        struct.setString_valueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.int_value = iprot.readI32();
        struct.setInt_valueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.datetime_value = iprot.readI64();
        struct.setDatetime_valueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.boolean_value = iprot.readBool();
        struct.setBoolean_valueIsSet(true);
      }
    }
  }

}

